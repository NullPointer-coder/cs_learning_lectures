Problem 1:

The big deal is reading in the file line-by-line without losing
LEADING spaces.  This works:

IFS='' # change Bash's input field separator from whitespace to nothing
cat "$1.orig" | while read line # read each line, preserving spaces
do
  while echo "$line" | grep -q " $" # loop if there is trailing space

Problem 2:

cut starts column numbers at 1, so for problem 2, if the user
specifies column 2, that's 3 according to cut

Problem 3:

You really should compare each file to each other file just once.
Compare: 1 to 2, 3, and 4
compare: 2 to 3 and 4
compare: 3 to 4

Obviously, a doubly-nested for loop, with the inner loop index
starting one larger than the outer loop index

index_outer=0
for file1 in $(ls *)
do
  ((index_outer++))
  index_inner=$((index_outer + 1))

  for file2 in $(echo * | cut -d" " -f"$index_inner-")
  do

General notes:

Change this:
  if [ $# -eq 0 ]
to this:
  if [[ $# -eq 0 ]]

Get rid of all semicolons.  Change this:
  if [[ foo ]] ; then
into this:
  if [[ foo ]]
  then

Indent all blocks.  Change this:
if [[ ! -f $1 ]]
then
echo "file not found"
exit 1
fi

to this:
if [[ ! -f $1 ]]
then
  echo "file not found"
  exit 1
fi

Get rid of backticks, and do not use expr.  Change this:
sum=`expr $sum + $number`

into this:
sum=$((sum + number))

md5sum produces output that looks like this:
$ md5sum foo
1d9537b1b5307b8283ef15210caedc40  foo

so you have to extract just the first part of the output:
md5value=$(md5sum $filename | cut -f1 -d" ")

DO NOT USE BREAK OR CONTINUE!  Use proper if's and loops.

Make sure you don't have any non-ASCII characters in your files:
grep --color='auto' -P -n "[^\x00-\x7F]" *.sh
