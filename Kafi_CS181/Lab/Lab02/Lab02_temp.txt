// @author: Kafi Rahman
// The purpose of the program is to store student record information
// by using a collection class

#include <iomanip>
#include <iostream>
#include <fstream>
#include <string>
#include <memory>
#include <vector>

using namespace std;

const int NOT_FOUND = -1;

// file name
const string FILE_NAME="student_record.txt";


// menu choices
enum MenuOptions{ADD_NEW, VIEW_ALL, SEARCH, DELETE, SAVE_ALL, EXIT};

// student class
class Student
{
  private:
    unsigned id;  // positive value
    string name;  // name with space allowed
  public:
    void setName(string n)
    { name = n;
    }
    
    string getName()
    { return name;
    }
    
    void setID(int id_param)
    { id = id_param;
    }
    
    int getID()
    { return id;
    }
    
    // creating a single string value out of
    // all the fields of the student object
    string to_string()
    { string result = std::to_string(id) +" -- " + name;
      return result;
    }

}; // student class ends.


// this collection class employs a vector variable to store
// student records
class StudentCollection
{
  private:
    vector<Student> student_records; // holds all student records 
  
  public: 
    
  void load_all_records();
    
  
  // this function will input values for a new movie record
  // and will return that
  void add_new_record();
  
  
  // search the student records based on title
  int find_student_record(unsigned search_id);
  
  // if there is a student with delete_id in the record then that record would be deleted
  // otherwise, nothing happens.
  void delete_record(int delete_id);
    

  // view all student records
  void view_all_records();

  // save all the record in the vector to a file
  void save_all_records();
  

}; // studentcollection class ends




// display the menu and return the selection
int display_menu();


// the main function
int main()
{
  unique_ptr<Student> myStudent (new Student);
  
  int choice = EXIT;  // gets the choice from the user
  StudentCollection myStudentRecords;

  // load all student entries from the file, create objects, and add them in the collection
  myStudentRecords.load_all_records();
  
  do {
    choice = display_menu();

    switch(choice)
    {
      case ADD_NEW: // add new record
  
        myStudentRecords.add_new_record();
        break;

    
      case SEARCH: // search based on title
        int search_id;

        // get the ID to search from the user
        cout<<endl<<"Enter the ID that you want to search: ";
        cin>>search_id;
        cin.ignore(); // consume the new line character

        myStudentRecords.find_student_record(search_id);
        break;
   
      case VIEW_ALL: // view all records
    
        // call the function view_all_records to display all student records
        myStudentRecords.view_all_records();
        break;
    
    
      case DELETE: // delete a record
        int delete_id;
        cout<<endl<<"Enter the ID that you want to delete: ";
        cin>>delete_id;
        cin.ignore(); // consume the new line character
        myStudentRecords.delete_record(delete_id);
        break;
      
      
      case SAVE_ALL: // save all student object entries in a file
        myStudentRecords.save_all_records();
        cout<<endl<<"Success! all records have been saved.";
        break;
        
      case EXIT: // Exit the program
        cout<<endl<<"Thanks for using the program";
        break;
      
      default:
        cout<<"\nInvalid choice. Try again: \n";
        break;
    }

  } while (choice!=EXIT); // exit condition

  
  return 0;
}



// display the menu and return the selection
int display_menu()
{
  cout<<endl<<endl<<to_string(ADD_NEW) +  ". Add a new student record"<<endl
    <<to_string(VIEW_ALL) + ". View all student records"<<endl
    <<to_string(SEARCH) + ". Find a record by its ID number"<<endl
    <<to_string(DELETE) + ". Delete a student record"<<endl
    <<to_string(SAVE_ALL) + ". Save all student records in file"<<endl
    <<to_string(EXIT) + ". Exit the program"<<endl
    <<"Your choice: ";

  int choice = EXIT; // default choice is exit

  cin>>choice; // getting the user's choice

  return choice;
}



// definition of the class member functions

void StudentCollection::load_all_records()
{ // TODO as soon as the program starts,
  // read the student record entries from the file FILE_NAME and
  // create student objects for each entry
  // add them to the student_records collection
} 



// this function will input values for a new movie record
// and will return that
void StudentCollection::add_new_record()
{
  // TODO input the values for the student record (id and name)
  
  cout<<endl<<"Student ID: ";
  //cin>> id;

  //cin.ignore(); // ignores the newline character

  cout<<"Student Name: ";
  //getline(cin, name);
  
  // Declare a variable of Student object
  Student newStudent;
  
  // TODO use the public methods to initialize the student object
  // add the object in the student records vector

  
}



// search the student records based on title
int StudentCollection::find_student_record(unsigned search_id)
{ 
  for(size_t index = 0; index<student_records.size();index++)
  {
    if(student_records[index].getID() == search_id)
    {
      cout<<endl<<"The record has been found: ";
      cout<< student_records[index].to_string();
      return index;
    }
  }

  cout<<endl<<"The record was not found: ";
  return NOT_FOUND; // a negative value to indicate the record has not been found
  
} 


// if there is a student with delete_id in the record then that record would be deleted
// otherwise, nothing happens.
void StudentCollection::delete_record(int delete_id)
{ 
  // call the find_student_record(delete_id) and store the returned value
  int position = find_student_record(delete_id);
  
  // TODO if the return value is a positive value then
  student_records.erase(student_records.begin() + position);
  
  // TODO if successful then display 
  // cout<<endl<<"the record had been deleted"
}


// view all student records
void StudentCollection::view_all_records()
{
  cout<<endl<<endl<<"We have the following student records: ";
  // use a loop and call the to_string method to display the records
  for(unsigned i=0;i<student_records.size();i++)
  {  // display the student records
  }
}


// save all the record in the vector to a file
void StudentCollection::save_all_records()
{ // TODO when this option is selected, 
  // open the FILE_NAME in write mode
  // write each student object information in one single line in the file
  // write a confirmation that the operation was successful
}