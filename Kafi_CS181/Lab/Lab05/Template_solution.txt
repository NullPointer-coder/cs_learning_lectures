#include <iostream>
#include <string>
#include <iterator>

using namespace std;

/////////////////// EXCEPTION CLASS
class StorageException : public runtime_error //exception class that will be thrown
{
public:
  StorageException(string message) : runtime_error(message) // error message that will be caught
  {
  }
};

///////////////////// STORAGE CLASS

template <class T>
class Storage
{
private:
  T *array;
  int size;

public:
  // 1: basic constructor
  Storage(int length)
  {
    this->size = length;
    array = new T[length];
  }

  // 2: copy constructor;
  Storage(const Storage &elem);

  ~Storage(); // destructor;

  int array_size() const;

  void display() const // display all the elements of the array
  {
    // manually displaying things
    for (int i = 0; i < size; i++)
    {
      cout << array[i];
      if (i == size - 1)
        continue;
      cout << ", ";
    }
    cout << endl;
  }

  // 3: [] operator overloading
  T &operator[](const int &);

  // 4: friend function for ostream operator
  template <class OT>
  friend ostream &operator<<(std::ostream &os, Storage<OT> elem);

  // 5: declare the friend 2 template function maximum to find maximum element
  template <class MT>
  friend MT maximum(Storage<MT> elem);

  // 6: declare the friend template function searchElement in the following
  template <class ST>
  friend void searchElement(Storage<ST> searchVal, Storage<ST> elem);
};

////PART 2 COPY CONSTRUCTOR
template <class T>
Storage<T>::Storage(const Storage<T> &elem)
{
  //copy the array size
  size = elem.size;
  // allocate memory for  the array
  array = new T[size];

  for (int count = 0; count < size; count++) // copy the elements of the object array
    array[count] = elem.array[count];
}

template <class T>
Storage<T>::~Storage() // destructor function
{
  if (size > 0)
    delete[] array; // deleting the array if size greater than 0
}

template <class T>
int Storage<T>::array_size() const
{
  return size; // returning the size of the array
}

//PART 3 [] OPERATOR OVERLOADING
template <class T>
T &Storage<T>::operator[](const int &elem)
{
  if (elem < 0 || elem >= size) // if the following conditions are met, then the error is thrown
  {
    throw StorageException("Operator[]: Array is empty");
  }
  return array[elem]; // return the element of the array
}

//PART 4 OSTREAM OPERATOR
template <class OT>
ostream &operator<<(std::ostream &os, Storage<OT> elem) // defining the ostream  operator
{
  for (int i = 0; i < elem.size; i++)
  {
    os << elem.array[i] << ", "; // printing the array elements
  }
  
  return os;
}

//PART 5 FINDING THE MAXIMUM
template <class M>
M maximum(Storage<M> elem) // defining the Maximum function
{
  int length = elem.size;
  if (length == 0)
    throw StorageException("MAX: Array is empty"); // if the size of array is 0, throw exception

  M max = elem[0];

  for (int count = 1; count < length; count++)
  {
    if (elem[count] > max) // looping through and comparing value with the first element
      max = elem[count];   // if the condition is met store value in max
  }
  return max;
}

//PART 6 SEARCHING AN ELEMENT
template <class ST>
bool searchElement(ST searchVal, Storage<ST> elem) //defining the searchElement function
{
  bool flag = false;            // flag variable
  int size = elem.array_size(); // getting the size of the array

  if (size == 0)
    throw StorageException("Search: Array is empty"); // throwing the exception if size equals o

  for (int i = 0; i < size; i++)
  {
    if (searchVal == elem[i])
    {
      flag = true;
      return flag;
    } // looping to find the element and returning true of found
    else {
      return false;
    }
    
  }

  return false; // will return false if not found
}

///////////////////////////////////// DRIVER FUNCTION
int main()
{

  const int SIZE = 5;

  Storage<int> objStorage(SIZE);

  cout << "Enter " << SIZE + 1 << " values: ";

  try
  {
    for (int i = 0; i <= SIZE; i++)
    {
      cin >> objStorage[i]; //inputing values for the array
    }
  }
  catch (const StorageException)
  {
    cout << "Array index is invalid" << endl;
  }

  // searching and maximum calculation
  try
  {
    cout << "The values are: " << endl;
    // objStorage.display();
    cout << objStorage << endl;

    int maxElement = maximum(objStorage);

    cout << "Maximum: " << maxElement << endl;

    int searchVal = 0;
    cout << "Enter value you are searching for: ";
    cin >> searchVal;
    bool flag = searchElement(searchVal, objStorage);
    if (flag == true)
      cout << searchVal << " has been found" << endl;
    else
      cout << searchVal << " has NOT been found" << endl; 
  }

  catch (const StorageException)
  {
    cout << "The size of the array is invalid" << endl;
  }
  catch (...)
  {
    cout << "Unknown error" << endl;
  }

  return 0;
}